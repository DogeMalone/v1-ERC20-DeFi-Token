"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Utils = void 0;
const child_process_1 = require("child_process");
const debug_1 = __importDefault(require("debug"));
const path_1 = __importDefault(require("path"));
const error = debug_1.default('sol-merger:error');
class Utils {
    static isRelative(file) {
        return file.startsWith('.');
    }
    static getNodeModulesPath(file) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                child_process_1.exec('npm root', { cwd: path_1.default.dirname(file) }, (err, stdout) => {
                    if (err) {
                        error('Unable to find npm root directory. Make sure contract is inside npm package.');
                        return reject(err);
                    }
                    resolve(stdout.trim());
                });
            });
        });
    }
}
exports.Utils = Utils;
//# sourceMappingURL=utils.js.map