"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _inputContent, _antlrTree, _onVisit;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolidityImportVisitor = void 0;
const antlr4ts_1 = require("antlr4ts");
const ParseTreeWalker_1 = require("antlr4ts/tree/ParseTreeWalker");
const SolidityLexer_1 = require("../generated/SolidityLexer");
const SolidityParser_1 = require("../generated/SolidityParser");
class SolidityImportVisitor {
    constructor(inputContent) {
        _inputContent.set(this, void 0);
        _antlrTree.set(this, void 0);
        __classPrivateFieldSet(this, _inputContent, inputContent);
        const chars = antlr4ts_1.CharStreams.fromString(__classPrivateFieldGet(this, _inputContent));
        const lexer = new SolidityLexer_1.SolidityLexer(chars);
        const tokens = new antlr4ts_1.CommonTokenStream(lexer);
        const parser = new SolidityParser_1.SolidityParser(tokens);
        __classPrivateFieldSet(this, _antlrTree, parser.sourceUnit());
    }
    visit(onVisit) {
        const listener = new ImportDefinitionVisitor(onVisit);
        ParseTreeWalker_1.ParseTreeWalker.DEFAULT.walk(listener, __classPrivateFieldGet(this, _antlrTree));
    }
}
exports.SolidityImportVisitor = SolidityImportVisitor;
_inputContent = new WeakMap(), _antlrTree = new WeakMap();
class ImportDefinitionVisitor {
    constructor(onVisit) {
        _onVisit.set(this, void 0);
        __classPrivateFieldSet(this, _onVisit, onVisit);
    }
    enterImportDirective(ctx) {
        if (!ctx.children) {
            return;
        }
        if (!ctx._stop) {
            return;
        }
        const filename = this.getFilename(ctx);
        const globalRename = this.getGlobalRename(ctx);
        const namedImports = this.getNamedImports(ctx);
        __classPrivateFieldGet(this, _onVisit).call(this, {
            start: ctx._start.startIndex,
            end: ctx._stop.stopIndex,
            filename,
            globalRename,
            namedImports,
        });
    }
    getFilename(ctx) {
        const filename = ctx.getToken(SolidityParser_1.SolidityParser.StringLiteralFragment, 0);
        return filename.text.substring(1).substring(0, filename.text.length - 2);
    }
    getGlobalRename(ctx) {
        var _a;
        if (!((_a = ctx.children) === null || _a === void 0 ? void 0 : _a.length)) {
            return null;
        }
        const last = ctx.children[ctx.children.length - 2];
        if (last && last instanceof SolidityParser_1.IdentifierContext) {
            return last.text;
        }
        const second = ctx.children[1];
        const forth = ctx.children[3];
        if (second.text === '*' && forth && forth instanceof SolidityParser_1.IdentifierContext) {
            return forth.text;
        }
        return null;
    }
    getNamedImports(ctx) {
        const importDeclarations = ctx.getRuleContexts(SolidityParser_1.ImportDeclarationContext);
        if (!importDeclarations.length) {
            return null;
        }
        const result = [];
        importDeclarations.forEach((importDeclaration) => {
            var _a;
            if (!importDeclaration.children) {
                return;
            }
            result.push({
                name: importDeclaration.children[0].text,
                as: ((_a = importDeclaration.children[2]) === null || _a === void 0 ? void 0 : _a.text) || null,
            });
        });
        return result;
    }
}
_onVisit = new WeakMap();
//# sourceMappingURL=importVisitor.js.map